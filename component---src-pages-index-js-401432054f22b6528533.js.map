{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["Index","data","location","regionsDates","allRegionsZonesCsv","edges","forEach","item","index","node","Date","zones","allMarkdownRemark","nodes","frontmatter","id","html","zoneLabels","label","d","today","getDate","getMonth","getFullYear","initialState","region","window","localStorage","getItem","date","useReducer","state","action","type","Error","dispatch","getZoneCode","getCurrentZoneCode","code","sameZones","getZoneLabel","Object","values","filter","value","self","indexOf","length","React","useEffect","setItem","navigator","geolocation","console","log","getCurrentPosition","position","latitude","coords","longitude","topojson","topodata","objects","regions","features","d3","properties","reg_name","Regions","dates","keys","className","getHeader","dangerouslySetInnerHTML","__html"],"mappings":"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","file":"component---src-pages-index-js-401432054f22b6528533.js","sourcesContent":["import React, { useReducer } from \"react\"\nimport { graphql } from \"gatsby\"\nimport { Regions } from \"../labels/regions\";\nimport RegionSelector from \"../components/region-selector\";\nimport DateSelector from \"../components/date-selector\";\nimport Layout from \"../components/layout\";\nimport * as topojson from \"topojson-client\";\nimport topodata from \"../data/limits_IT_regions.topo.json\";\nimport * as d3 from \"d3\";\n\n\nexport default function Index({ data, location }) {\n    const regionsDates = {};\n    data.allRegionsZonesCsv.edges.forEach(function (item, index) {\n        regionsDates[item.node.Date] = item.node;\n    });\n\n    const zones = {};\n    data.allMarkdownRemark.nodes.forEach(function (item, index) {\n        zones[item.frontmatter.id] = item.html;\n    });\n\n    const zoneLabels = {};\n    data.allMarkdownRemark.nodes.forEach(function (item, index) {\n        zoneLabels[item.frontmatter.id] = item.frontmatter.label;\n    });\n\n    const d = new Date();\n    const today = d.getDate() + \"/\" + (d.getMonth() + 1) + \"/\" + d.getFullYear();\n\n    const region = window.localStorage.getItem('region') ?? 0;\n\n    const initialState = {region: region, date: today};\n\n    function reducer(state, action) {\n        switch (action.type) {\n            case 'region':\n                return {region: action.region, date: state.date};\n            case 'date':\n                return {region: state.region, date: action.date};\n            default:\n                throw new Error();\n        }\n    }\n\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    React.useEffect(() => {\n        if (state.region !== 0) {\n            localStorage.setItem('region', state.region);\n        }\n    }, [state]);\n\n    // Try to locate the user, only once.\n    React.useEffect(() => {\n        function success(position) {\n            const latitude  = position.coords.latitude;\n            const longitude = position.coords.longitude;\n\n            // d3.geoContains works with geojson only.\n            const geodata = topojson.feature(topodata, topodata.objects.regions);\n\n            // Find the located region.\n            for (const region of geodata.features) {\n                if (d3.geoContains(region, [longitude, latitude])) {\n                    dispatch({type: 'region', 'region': region.properties.reg_name});\n                    break;\n                }\n            }\n        }\n\n        function error() {\n            console.log('Unable to retrieve your location');\n        }\n\n        if(!navigator.geolocation) {\n            console.log('Geolocation is not supported by your browser');\n        } else {\n            // No need to query if we already have a region.\n            if (initialState.region === 0) {\n                console.log('Locating...');\n                navigator.geolocation.getCurrentPosition(success, error);\n            }\n        }\n    }, []);\n\n    function getZoneCode(date, region) {\n        if (region !== 0 && date !== 0) {\n            return regionsDates[date][region];\n        }\n        else {\n            return '';\n        }\n    }\n\n    function getCurrentZoneCode() {\n        let code = getZoneCode(state.date, state.region);\n        // If all regions are in the same zone, the region is not mandatory.\n        if (sameZones(state.date) && code === \"\") {\n            code = getZoneCode(state.date, 'Lombardia');\n        }\n        return code;\n    }\n\n    function getZoneLabel() {\n        const code = getCurrentZoneCode();\n        if (code) {\n            return zoneLabels[code];\n        }\n    }\n\n    function getZoneText() {\n        const code = getCurrentZoneCode();\n        if (code) {\n            return zones[code];\n        }\n        else if (sameZones(state.date)) {\n            return zones[getZoneCode(state.date, 'Lombardia')];\n        }\n        else {\n            return \"Per favore scegli una regione e una data.\";\n        }\n    }\n\n    function getDate() {\n        return state.date !== 0 ? state.date : '';\n    }\n\n    function getRegion() {\n        return state.region !== 0 ? Regions[state.region] : '';\n    }\n\n    function getHeader() {\n        let code = getCurrentZoneCode();\n        if (code) {\n            if (sameZones(state.date)) {\n                return \"Tutte le regioni, \" + getDate() + \": \" + getZoneLabel();\n            }\n            else {\n                return getRegion() + \", \" + getDate() + \": \" + getZoneLabel();\n            }\n        }\n    }\n\n    // Returns whether all regions are in the same zone.\n    function sameZones(date) {\n        const dayZones = Object.values(regionsDates[date]);\n        const uniqueZones = dayZones.filter((value, index, self) => {\n            return self.indexOf(value) === index;\n        });\n        // Date is also a property.\n        return uniqueZones.length === 2;\n    }\n\n    const siteTitle = \"Oggi Posso\";\n\n    return (\n        <Layout location={location}>\n            <form>\n                <RegionSelector regions={Regions} state={state} dispatch={dispatch} />\n                <DateSelector dates={Object.keys(regionsDates)} state={state} dispatch={dispatch} />\n                <h2 className={getCurrentZoneCode()}>\n                    { getHeader() }\n                </h2>\n                <div dangerouslySetInnerHTML={{ __html: getZoneText() }} />\n            </form>\n        </Layout>\n    )\n}\n\nexport const query = graphql`\n    {\n      allRegionsZonesCsv {\n        edges {\n          node {\n            Date\n            Abruzzo\n            Basilicata\n            Calabria\n            Campania\n            Emilia_Romagna\n            Friuli_Venezia_Giulia\n            Lazio\n            Liguria\n            Lombardia\n            Marche\n            Molise\n            Piemonte\n            Puglia\n            Sardegna\n            Sicilia\n            Toscana\n            Trentino_Alto_Adige\n            Umbria\n            Valle_d_Aosta\n            Veneto\n          }\n        }\n      }\n      allMarkdownRemark {\n        nodes {\n          html\n          frontmatter {\n            id\n            label\n            language\n          }\n        }\n      }\n    }\n`\n"],"sourceRoot":""}