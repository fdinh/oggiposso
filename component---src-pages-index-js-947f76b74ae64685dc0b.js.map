{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["Index","data","location","regionsDates","allRegionsZonesCsv","edges","forEach","item","index","node","Date","zones","allMarkdownRemark","nodes","frontmatter","id","html","zoneLabels","label","d","initialState","region","date","getDate","getMonth","getFullYear","useReducer","state","action","type","Error","dispatch","getZoneCode","getCurrentZoneCode","code","sameZones","getZoneLabel","Object","values","filter","value","self","indexOf","length","React","useEffect","localStorage","setItem","navigator","geolocation","storedRegion","getItem","avoidGeolocation","console","log","getCurrentPosition","position","latitude","coords","longitude","topojson","topodata","objects","regions","features","d3","properties","reg_name","Regions","dates","keys","className","getHeader","dangerouslySetInnerHTML","__html","getZoneText"],"mappings":"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","file":"component---src-pages-index-js-947f76b74ae64685dc0b.js","sourcesContent":["import React, { useReducer } from \"react\"\nimport { graphql } from \"gatsby\"\nimport { Regions } from \"../labels/regions\";\nimport RegionSelector from \"../components/region-selector\";\nimport DateSelector from \"../components/date-selector\";\nimport Layout from \"../components/layout\";\nimport * as topojson from \"topojson-client\";\nimport topodata from \"../data/limits_IT_regions.topo.json\";\nimport * as d3 from \"d3\";\nimport SEO from \"../components/seo\";\n\n\nexport default function Index({ data, location }) {\n    const regionsDates = {};\n    data.allRegionsZonesCsv.edges.forEach(function (item, index) {\n        regionsDates[item.node.Date] = item.node;\n    });\n\n    const zones = {};\n    data.allMarkdownRemark.nodes.forEach(function (item, index) {\n        zones[item.frontmatter.id] = item.html;\n    });\n\n    const zoneLabels = {};\n    data.allMarkdownRemark.nodes.forEach(function (item, index) {\n        zoneLabels[item.frontmatter.id] = item.frontmatter.label;\n    });\n\n    const d = new Date();\n    const today = d.getDate() + \"/\" + (d.getMonth() + 1) + \"/\" + d.getFullYear();\n\n    const initialState = {region: '0', date: today};\n\n    function reducer(state, action) {\n        switch (action.type) {\n            case 'region':\n                return {region: action.region, date: state.date};\n            case 'date':\n                return {region: state.region, date: action.date};\n            default:\n                throw new Error();\n        }\n    }\n\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    React.useEffect(() => {\n        if (state.region !== '0') {\n            localStorage.setItem('region', state.region);\n        }\n    }, [state]);\n\n    // Try to locate the user, only once.\n    React.useEffect(() => {\n        function success(position) {\n            const latitude  = position.coords.latitude;\n            const longitude = position.coords.longitude;\n\n            // d3.geoContains works with geojson only.\n            const geodata = topojson.feature(topodata, topodata.objects.regions);\n\n            // Find the located region.\n            for (const region of geodata.features) {\n                if (d3.geoContains(region, [longitude, latitude])) {\n                    dispatch({type: 'region', 'region': region.properties.reg_name});\n                    break;\n                }\n            }\n        }\n\n        function error() {\n            console.log('Unable to retrieve your location, will not bother you again');\n            // Do not bug people if they did not allow geolocation.\n            localStorage.setItem('avoid_geolocation', '1');\n        }\n\n        if(!navigator.geolocation) {\n            console.log('Geolocation is not supported by your browser');\n        } else {\n            // No need to query if we already have a region.\n            if (state.region === '0') {\n                const storedRegion = localStorage.getItem('region') ?? '0';\n                const avoidGeolocation = localStorage.getItem('avoid_geolocation') ?? '0';\n                if (storedRegion === '0' && avoidGeolocation === '0') {\n                    console.log('Locating...');\n                    navigator.geolocation.getCurrentPosition(success, error);\n                }\n                else {\n                    // Use the region from the localStorage\n                    dispatch({type: 'region', 'region': storedRegion});\n                }\n            }\n        }\n    }, []);\n\n    function getZoneCode(date, region) {\n        if (region !== '0' && date !== '0') {\n            return regionsDates[date][region];\n        }\n        else {\n            return '';\n        }\n    }\n\n    function getCurrentZoneCode() {\n        let code = getZoneCode(state.date, state.region);\n        // If all regions are in the same zone, the region is not mandatory.\n        if (state.date !== '0' && sameZones(state.date) && code === '') {\n            code = getZoneCode(state.date, 'Lombardia');\n        }\n        return code;\n    }\n\n    function getZoneLabel() {\n        const code = getCurrentZoneCode();\n        if (code) {\n            return zoneLabels[code];\n        }\n    }\n\n    function getZoneText() {\n        if (state.date !== '0') {\n            const code = getCurrentZoneCode();\n            if (code) {\n                return zones[code];\n            }\n            else if (sameZones(state.date)) {\n                return zones[getZoneCode(state.date, 'Lombardia')];\n            }\n            else {\n                return \"Per favore scegli una regione e una data.\";\n            }\n        }\n        else {\n            return \"Per favore scegli una regione e una data.\";\n        }\n    }\n\n    function getDate() {\n        return state.date !== '0' ? state.date : '';\n    }\n\n    function getRegion() {\n        return state.region !== '0' ? Regions[state.region] : '';\n    }\n\n    function getHeader() {\n        let code = getCurrentZoneCode();\n        if (code) {\n            if (sameZones(state.date)) {\n                return \"Tutte le regioni, \" + getDate() + \": \" + getZoneLabel();\n            }\n            else {\n                return getRegion() + \", \" + getDate() + \": \" + getZoneLabel();\n            }\n        }\n    }\n\n    // Returns whether all regions are in the same zone.\n    function sameZones(date) {\n        const dayZones = Object.values(regionsDates[date]);\n        const uniqueZones = dayZones.filter((value, index, self) => {\n            return self.indexOf(value) === index;\n        });\n        // Date is also a property.\n        return uniqueZones.length === 2;\n    }\n\n    return (\n        <Layout location={location}>\n            <SEO></SEO>\n            <form>\n                <RegionSelector regions={Regions} state={state} dispatch={dispatch} />\n                <DateSelector dates={Object.keys(regionsDates)} state={state} dispatch={dispatch} />\n                <h2 className={getCurrentZoneCode()}>\n                    { getHeader() }\n                </h2>\n                <div dangerouslySetInnerHTML={{ __html: getZoneText() }} />\n            </form>\n        </Layout>\n    )\n}\n\nexport const query = graphql`\n    {\n      allRegionsZonesCsv {\n        edges {\n          node {\n            Date\n            Abruzzo\n            Basilicata\n            Calabria\n            Campania\n            Emilia_Romagna\n            Friuli_Venezia_Giulia\n            Lazio\n            Liguria\n            Lombardia\n            Marche\n            Molise\n            Piemonte\n            Puglia\n            Sardegna\n            Sicilia\n            Toscana\n            Trentino_Alto_Adige\n            Umbria\n            Valle_d_Aosta\n            Veneto\n          }\n        }\n      }\n      allMarkdownRemark {\n        nodes {\n          html\n          frontmatter {\n            id\n            label\n            language\n          }\n        }\n      }\n    }\n`\n"],"sourceRoot":""}