{"version":3,"sources":["webpack:///./src/labels/regions.js","webpack:///./src/components/region-selector.js","webpack:///./src/components/date-selector.js","webpack:///./src/components/layout.js","webpack:///./src/pages/index.js"],"names":["Regions","RegionSelector","props","regions","state","dispatch","items","push","key","value","Object","entries","region","onChange","event","type","target","DateSelector","dates","date","Layout","location","title","children","isRootPath","__PATH_PREFIX__","pathname","className","to","data-is-root-path","href","Index","data","regionsDates","allRegionsZonesCsv","edges","forEach","item","index","node","Date","zones","allMarkdownRemark","nodes","frontmatter","id","html","zoneLabels","label","d","initialState","getDate","getMonth","getFullYear","getZoneCode","getZoneLabel","code","useReducer","action","Error","keys","values","filter","self","indexOf","length","getHeader","dangerouslySetInnerHTML","__html"],"mappings":"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","file":"component---src-pages-index-js-c40a8602c10679e54291.js","sourcesContent":["// Map keys to labels.\nexport const Regions = {\n    \"Abruzzo\": \"Abruzzo\",\n    \"Basilicata\": \"Basilicata\",\n    \"Calabria\": \"Calabria\",\n    \"Campania\": \"Campania\",\n    \"Emilia_Romagna\": \"Emilia-Romagna\",\n    \"Friuli_Venezia_Giulia\": \"Friuli-Venezia Giulia\",\n    \"Lazio\": \"Lazio\",\n    \"Liguria\": \"Liguria\",\n    \"Lombardia\": \"Lombardia\",\n    \"Marche\": \"Marche\",\n    \"Molise\": \"Molise\",\n    \"Piemonte\": \"Piemonte\",\n    \"Puglia\": \"Puglia\",\n    \"Sardegna\": \"Sardegna\",\n    \"Sicilia\": \"Sicilia\",\n    \"Toscana\": \"Toscana\",\n    \"Trentino_Alto_Adige\": \"Trentino-Alto Adige\",\n    \"Valle_d_Aosta\": \"Valle d'Aosta\",\n    \"Veneto\": \"Veneto\",\n};","import React from \"react\"\n\nfunction RegionSelector(props) {\n    const { regions, state, dispatch } = props;\n\n    const handleChange = (event) => {\n        dispatch({type: 'region', 'region': event.target.value});\n    }\n\n    const items = []\n    items.push(<option key=\"0\" value=\"0\">Scegli una regione</option>)\n    for (const [key, value] of Object.entries(regions)) {\n        items.push(<option key={key} value={key}>{value}</option>)\n    }\n\n    return (\n        <select value={state.region} onChange={handleChange}>\n            {items}\n        </select>\n    );\n}\n\nexport default RegionSelector\n","import React from \"react\"\n\nfunction DateSelector({ dates, state, dispatch }) {\n    const handleChange = (event) => {\n        dispatch({type: 'date', 'date': event.target.value});\n    }\n\n    const items = []\n    items.push(<option key=\"0\" value=\"0\">Scegli un giorno</option>)\n\n    for (const value of dates) {\n        items.push(<option key={value} value={value}>{value}</option>)\n    }\n\n    return (\n        <select value={state.date} onChange={handleChange}>\n            {items}\n        </select>\n    );\n}\n\nexport default DateSelector\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  // @todo: display site name?\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\"></header>\n      <main>{children}</main>\n      <footer>\n          <a href=\"/\">Termini di utilizzo</a> - {` `}\n          <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfiuthLNYyeeOd1n5J0dHclP-3mrRvv8K4lQGzkBlGem8-nzA/viewform\">Contatti</a> - {` `}\n          <a href=\"https://github.com/mmolinari/oggiposso\">GitHub</a>\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","import React, { useReducer } from \"react\"\nimport { graphql } from \"gatsby\"\nimport { Regions } from \"../labels/regions\";\nimport RegionSelector from \"../components/region-selector\";\nimport DateSelector from \"../components/date-selector\";\nimport Layout from \"../components/layout\";\n\n\nexport default function Index({ data, location }) {\n    const regionsDates = {};\n    data.allRegionsZonesCsv.edges.forEach(function (item, index) {\n        regionsDates[item.node.Date] = item.node;\n    });\n\n    const zones = {};\n    data.allMarkdownRemark.nodes.forEach(function (item, index) {\n        zones[item.frontmatter.id] = item.html;\n    });\n\n    const zoneLabels = {};\n    data.allMarkdownRemark.nodes.forEach(function (item, index) {\n        zoneLabels[item.frontmatter.id] = item.frontmatter.label;\n    });\n\n    const d = new Date();\n    const today = d.getDate() + \"/\" + (d.getMonth() + 1) + \"/\" + d.getFullYear();\n\n    const initialState = {region: 0, date: today};\n\n    function reducer(state, action) {\n        switch (action.type) {\n            case 'region':\n                return {region: action.region, date: state.date};\n            case 'date':\n                return {region: state.region, date: action.date};\n            default:\n                throw new Error();\n        }\n    }\n\n    function getZoneCode() {\n        if (state.region !== 0 && state.date !== 0) {\n            return regionsDates[state.date][state.region];\n        }\n        else {\n            return '';\n        }\n    }\n\n    function getZoneLabel() {\n        const code = getZoneCode();\n        if (code) {\n            return zoneLabels[code];\n        }\n    }\n\n    function getZoneText() {\n        const code = getZoneCode();\n        if (code) {\n            return zones[code];\n        }\n        else {\n            return \"Per favore scegli una regione e una data.\";\n        }\n    }\n\n    function getDate() {\n        return state.date !== 0 ? state.date : '';\n    }\n\n    function getRegion() {\n        return state.region !== 0 ? Regions[state.region] : '';\n    }\n\n    function getHeader() {\n        let code = getZoneCode();\n        if (code) {\n            if (sameZones(state.date)) {\n                return \"Tutte le regioni, \" + getDate() + \": \" + getZoneLabel();\n            }\n            else {\n                return getRegion() + \", \" + getDate() + \": \" + getZoneLabel();\n            }\n        }\n    }\n\n    // Returns whether all regions are in the same zone.\n    function sameZones(date) {\n        const dayZones = Object.values(regionsDates[date]);\n        const uniqueZones = dayZones.filter((value, index, self) => {\n            return self.indexOf(value) === index;\n        });\n        // Date is also a property.\n        return uniqueZones.length === 2;\n    }\n\n    const siteTitle = \"Oggi Posso\";\n\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    return (\n        <Layout location={location} title={siteTitle}>\n            <form>\n                <RegionSelector regions={Regions} state={state} dispatch={dispatch} />\n                <DateSelector dates={Object.keys(regionsDates)} state={state} dispatch={dispatch} />\n                <h2 className={getZoneCode()}>\n                    { getHeader() }\n                </h2>\n                <div dangerouslySetInnerHTML={{ __html: getZoneText() }} />\n            </form>\n        </Layout>\n    )\n}\n\nexport const query = graphql`\n    {\n      allRegionsZonesCsv {\n        edges {\n          node {\n            Date\n            Abruzzo\n            Basilicata\n            Calabria\n            Campania\n            Emilia_Romagna\n            Friuli_Venezia_Giulia\n            Lazio\n            Liguria\n            Lombardia\n            Marche\n            Molise\n            Piemonte\n            Puglia\n            Sardegna\n            Sicilia\n            Toscana\n            Trentino_Alto_Adige\n            Umbria\n            Valle_d_Aosta\n            Veneto\n          }\n        }\n      }\n      allMarkdownRemark {\n        nodes {\n          html\n          frontmatter {\n            id\n            label\n            language\n          }\n        }\n      }\n    }\n`\n"],"sourceRoot":""}