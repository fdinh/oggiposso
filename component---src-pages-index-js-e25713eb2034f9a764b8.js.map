{"version":3,"sources":["webpack:///./src/labels/regions.js","webpack:///./src/components/last-update.js","webpack:///./src/components/sources.js","webpack:///./src/components/layout.js","webpack:///./src/components/sources.module.css","webpack:///./src/pages/index.js","webpack:///./src/components/region-selector.js","webpack:///./src/components/date-selector.js"],"names":["Regions","LastUpdate","query","render","data","allFile","nodes","mtime","Sources","links","source","push","href","className","sourcesStyles","sources","Layout","location","children","isRootPath","pathname","to","data-is-root-path","module","exports","Index","regionsDates","allRegionsZonesCsv","edges","forEach","item","index","node","Date","zones","allMarkdownRemark","frontmatter","id","html","zoneLabels","label","d","initialState","region","date","getDate","getMonth","getFullYear","getZoneCode","getCurrentZoneCode","code","state","sameZones","getZoneLabel","Object","values","filter","value","self","indexOf","length","useReducer","action","type","Error","dispatch","regions","dates","keys","getHeader","dangerouslySetInnerHTML","__html","RegionSelector","props","items","key","entries","onChange","event","target","DateSelector"],"mappings":"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","file":"component---src-pages-index-js-e25713eb2034f9a764b8.js","sourcesContent":["// Map keys to labels.\nexport const Regions = {\n    \"Abruzzo\": \"Abruzzo\",\n    \"Basilicata\": \"Basilicata\",\n    \"Calabria\": \"Calabria\",\n    \"Campania\": \"Campania\",\n    \"Emilia_Romagna\": \"Emilia-Romagna\",\n    \"Friuli_Venezia_Giulia\": \"Friuli-Venezia Giulia\",\n    \"Lazio\": \"Lazio\",\n    \"Liguria\": \"Liguria\",\n    \"Lombardia\": \"Lombardia\",\n    \"Marche\": \"Marche\",\n    \"Molise\": \"Molise\",\n    \"Piemonte\": \"Piemonte\",\n    \"Puglia\": \"Puglia\",\n    \"Sardegna\": \"Sardegna\",\n    \"Sicilia\": \"Sicilia\",\n    \"Toscana\": \"Toscana\",\n    \"Trentino_Alto_Adige\": \"Trentino-Alto Adige\",\n    \"Umbria\": \"Umbria\",\n    \"Valle_d_Aosta\": \"Valle d'Aosta\",\n    \"Veneto\": \"Veneto\",\n};","import React from \"react\"\nimport {graphql, StaticQuery} from \"gatsby\"\n\nexport default function LastUpdate() {\n  return (\n      <StaticQuery\n          query={graphql`\n                query {\n                    allFile(filter: {name: {eq: \"regions-zones\"}}) {\n                        nodes {\n                            mtime(formatString: \"D/M/YYYY h:mm\")\n                        }\n                    }\n                }\n          `}\n          render={data => (\n              <div>Ultimo aggiornamento: {data.allFile.nodes[0].mtime}</div>\n          )}\n      />\n  )\n}\n","import React from \"react\"\nimport sourcesStyles from \"./sources.module.css\"\n\nexport default function Sources() {\n    const sources = [\n        'http://www.governo.it/it/articolo/domande-frequenti-sulle-misure-adottate-dal-governo/15638',\n        'http://www.salute.gov.it/portale/nuovocoronavirus/dettaglioContenutiNuovoCoronavirus.jsp?area=nuovoCoronavirus&id=5351&lingua=italiano&menu=vuoto',\n        'https://www.ilsole24ore.com/art/coronavirus-mappa-e-restrizioni-zona-previste-nuovo-dpcm-ADDS4B0?refresh_ce=1',\n        'https://tg24.sky.it/cronaca/2020/12/19/calendario-divieti-natale-2020',\n        'https://tg24.sky.it/cronaca/2020/12/19/natale-regole-spostamenti-pranzo-cenone',\n    ];\n\n    let links = [];\n    for (const source of sources) {\n        links.push(<li><a href={source}>{source}</a></li>);\n    }\n\n    return  (\n        <div className={sourcesStyles.sources}>\n            Fonti:\n            <ul>\n                {links}\n            </ul>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport LastUpdate from \"./last-update\";\nimport Sources from \"./sources\";\n\nconst Layout = ({ location, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  const title = \"Oggi Posso\";\n\n    let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  // @todo: display site name?\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\"></header>\n      <main>{children}</main>\n      <footer>\n          <div>\n              <Link to=\"/\">Home</Link> - {` `}\n              <Link to=\"/terms\">Termini di utilizzo</Link> - {` `}\n              <Link to=\"/privacy\">Informativa sulla privacy</Link> - {` `}\n              <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfiuthLNYyeeOd1n5J0dHclP-3mrRvv8K4lQGzkBlGem8-nzA/viewform\">Contatti</a> - {` `}\n              <a href=\"https://github.com/mmolinari/oggiposso\">GitHub</a>\n          </div>\n\n          <LastUpdate></LastUpdate>\n          <Sources></Sources>\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sources\":\"sources-module--sources--1njT4\"};","import React, { useReducer } from \"react\"\nimport { graphql } from \"gatsby\"\nimport { Regions } from \"../labels/regions\";\nimport RegionSelector from \"../components/region-selector\";\nimport DateSelector from \"../components/date-selector\";\nimport Layout from \"../components/layout\";\n\n\nexport default function Index({ data, location }) {\n    const regionsDates = {};\n    data.allRegionsZonesCsv.edges.forEach(function (item, index) {\n        regionsDates[item.node.Date] = item.node;\n    });\n\n    const zones = {};\n    data.allMarkdownRemark.nodes.forEach(function (item, index) {\n        zones[item.frontmatter.id] = item.html;\n    });\n\n    const zoneLabels = {};\n    data.allMarkdownRemark.nodes.forEach(function (item, index) {\n        zoneLabels[item.frontmatter.id] = item.frontmatter.label;\n    });\n\n    const d = new Date();\n    const today = d.getDate() + \"/\" + (d.getMonth() + 1) + \"/\" + d.getFullYear();\n\n    const initialState = {region: 0, date: today};\n\n    function reducer(state, action) {\n        switch (action.type) {\n            case 'region':\n                return {region: action.region, date: state.date};\n            case 'date':\n                return {region: state.region, date: action.date};\n            default:\n                throw new Error();\n        }\n    }\n\n    function getZoneCode(date, region) {\n        if (region !== 0 && date !== 0) {\n            return regionsDates[date][region];\n        }\n        else {\n            return '';\n        }\n    }\n\n    function getCurrentZoneCode() {\n        let code = getZoneCode(state.date, state.region);\n        // If all regions are in the same zone, the region is not mandatory.\n        if (sameZones(state.date) && code === \"\") {\n            code = getZoneCode(state.date, 'Lombardia');\n        }\n        return code;\n    }\n\n    function getZoneLabel() {\n        const code = getCurrentZoneCode();\n        if (code) {\n            return zoneLabels[code];\n        }\n    }\n\n    function getZoneText() {\n        const code = getCurrentZoneCode();\n        if (code) {\n            return zones[code];\n        }\n        else if (sameZones(state.date)) {\n            return zones[getZoneCode(state.date, 'Lombardia')];\n        }\n        else {\n            return \"Per favore scegli una regione e una data.\";\n        }\n    }\n\n    function getDate() {\n        return state.date !== 0 ? state.date : '';\n    }\n\n    function getRegion() {\n        return state.region !== 0 ? Regions[state.region] : '';\n    }\n\n    function getHeader() {\n        let code = getCurrentZoneCode();\n        if (code) {\n            if (sameZones(state.date)) {\n                return \"Tutte le regioni, \" + getDate() + \": \" + getZoneLabel();\n            }\n            else {\n                return getRegion() + \", \" + getDate() + \": \" + getZoneLabel();\n            }\n        }\n    }\n\n    // Returns whether all regions are in the same zone.\n    function sameZones(date) {\n        const dayZones = Object.values(regionsDates[date]);\n        const uniqueZones = dayZones.filter((value, index, self) => {\n            return self.indexOf(value) === index;\n        });\n        // Date is also a property.\n        return uniqueZones.length === 2;\n    }\n\n    const siteTitle = \"Oggi Posso\";\n\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    return (\n        <Layout location={location}>\n            <form>\n                <RegionSelector regions={Regions} state={state} dispatch={dispatch} />\n                <DateSelector dates={Object.keys(regionsDates)} state={state} dispatch={dispatch} />\n                <h2 className={getCurrentZoneCode()}>\n                    { getHeader() }\n                </h2>\n                <div dangerouslySetInnerHTML={{ __html: getZoneText() }} />\n            </form>\n        </Layout>\n    )\n}\n\nexport const query = graphql`\n    {\n      allRegionsZonesCsv {\n        edges {\n          node {\n            Date\n            Abruzzo\n            Basilicata\n            Calabria\n            Campania\n            Emilia_Romagna\n            Friuli_Venezia_Giulia\n            Lazio\n            Liguria\n            Lombardia\n            Marche\n            Molise\n            Piemonte\n            Puglia\n            Sardegna\n            Sicilia\n            Toscana\n            Trentino_Alto_Adige\n            Umbria\n            Valle_d_Aosta\n            Veneto\n          }\n        }\n      }\n      allMarkdownRemark {\n        nodes {\n          html\n          frontmatter {\n            id\n            label\n            language\n          }\n        }\n      }\n    }\n`\n","import React from \"react\"\n\nfunction RegionSelector(props) {\n    const { regions, state, dispatch } = props;\n\n    const handleChange = (event) => {\n        dispatch({type: 'region', 'region': event.target.value});\n    }\n\n    const items = []\n    items.push(<option key=\"0\" value=\"0\">Scegli una regione</option>)\n    for (const [key, value] of Object.entries(regions)) {\n        items.push(<option key={key} value={key}>{value}</option>)\n    }\n\n    return (\n        <select value={state.region} onChange={handleChange}>\n            {items}\n        </select>\n    );\n}\n\nexport default RegionSelector\n","import React from \"react\"\n\nfunction DateSelector({ dates, state, dispatch }) {\n    const handleChange = (event) => {\n        dispatch({type: 'date', 'date': event.target.value});\n    }\n\n    const items = []\n    items.push(<option key=\"0\" value=\"0\">Scegli un giorno</option>)\n\n    for (const value of dates) {\n        items.push(<option key={value} value={value}>{value}</option>)\n    }\n\n    return (\n        <select value={state.date} onChange={handleChange}>\n            {items}\n        </select>\n    );\n}\n\nexport default DateSelector\n"],"sourceRoot":""}